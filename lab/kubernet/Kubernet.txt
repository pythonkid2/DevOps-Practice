in summaryy select 3 number of instances - 

instance type -

select t2.medium or t3a.medium

create 3 machines 

create network connectivity between these 3

inboud rules - 

type: all traffic  all all custon security group name 




machine 1

hostnamectl set-hostname kmaster

machine 2 & 3

hostnamectl set-hostname worker1 & in other worker2

check with hostname command

go ip a 
copy private ip

vi /etc/hosts     - hostname ip address maping

paste 

ip hostame
172.255.3   kmaster 
172....     Kworker1
,,,         kworker3

check ping hostname - it will work frommm all 3

+++
 
install kubernets  -https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/


sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


install docker on ubuntu - https://docs.docker.com/engine/install/ubuntu/

sudo apt-get update
sudo apt-get install ca-certificates curl gnupg

sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

#sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
we are installing only -
sudo apt-get install containerd.io

for Container Runtimes
https://kubernetes.io/docs/setup/production-environment/container-runtimes/ 


cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system


Verify that the br_netfilter, overlay modules are loaded by running the following commands:
        
        lsmod | grep br_netfilter
        lsmod | grep overlay
        
Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:
        
        sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

To use the systemd cgroup driver in /etc/containerd/config.toml with runc, set

vi /etc/containerd/config.toml
remove everything press ddd

paste 
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

sudo systemctl restart containerd


++++
go to master node 

kubeadm init

copy - kubeadm join ip:jf --tockeb ......checks and paste on worker node

copy mkdir -p $Home ......sudo choown ...config (3 commands)

paste on master 

kubectl get nodes

++++
apply networjk plugins 

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

or try 

sudo apt-get update
sudo apt-get install -y kubectl


+++
trouble shoot -

kubeadm reset
kubeadm init


+++
kubectl get pod -n kube-system -o wide

kubectl run nginx --image=nginx


