Ansible is a simple yet powerful IT automation tool that can be used to manage and automate a wide range of tasks, including:

Configuration management
Application deployment
Provisioning
Continuous delivery
Security and compliance
Orchestration
Ansible is easy to learn and use, making it a great choice for teams of all sizes. It is also highly scalable and can be used to automate complex tasks with ease.

Here is an example of how Ansible can be used to restart a few machines in a certain order, power down web servers, power down a database, start the database, and start the web servers:

---
- hosts: all
  tasks:
  - name: Restart machines in order
    service:
      name: reboot
      state: restarted
      delay: 60

  - name: Power down web servers
    service:
      name: httpd
      state: stopped

  - name: Power down database
    service:
      name: mysql
      state: stopped
      delay: 60

  - name: Start database
    service:
      name: mysql
      state: started

  - name: Start web servers
    service:
      name: httpd
      state: started
...
This playbook would first restart all of the machines in the all group, with a 60-second delay between each restart. Then, it would power down all of the web servers in the all group. Next, it would power down the database server. After a 60-second delay, it would start the database server. Finally, it would start all of the web servers in the all group.

This is just one example of how Ansible can be used to automate complex tasks. Ansible can be used to automate a wide range of other tasks, such as deploying applications, provisioning new servers, and configuring security settings.

Ansible is a powerful tool that can help you to save time and improve the efficiency of your IT team.

Sources
github.com/xtophd/RHEL7-Workshop

+++++

Create 2 ubuntu machines 20.04 
---> SSH

while having same user in both machine we can connect using ssh 
    ssh <ip> 

1, Create a user 
    with same name and password
    enable password based authentication
    establish ssh connectivity 


Do the following on all nodes.
	sudo su
	#create user called "vilas"
	useradd -m -s /bin/bash vilas
	#setup password
	passwd vilas

	#add to sudo groups

+++

centos (on worker/slave nodes)

	Without this user would be prompted for sudo user's access issue.
	Making yourself a super user. Open /etc/sudoers. Make sure following two lines are uncommented:
	## Allows people in group wheel to run all commands
	%wheel ALL=(ALL)       ALL

	## Same thing without a password
	%wheel ALL=(ALL)       NOPASSWD: ALL
	vilas ALL=(ALL)       NOPASSWD: ALL

	Add yourself to wheel group.

	usermod -aG wheel <yourname> 
	usermod -aG wheel vilas


+++

ubuntu top

	usermod -aG sudo <yourname> 
	usermod -aG sudo vilas
	
https://code-maven.com/enable-ansible-passwordless-sudo
	
visudo 

		change 
			%sudo   ALL=(ALL:ALL) ALL    comment it # in front
		to 
add the below 
			%sudo   ALL=(ALL:ALL) NOPASSWD: ALL

#check   sudo cat /etc/sudoers


#under /etc/ssh/sshd_config

		sudo vi /etc/ssh/sshd_config
		#sudo is mandatory

# To disable tunneled clear text passwords, change to no here!
	PasswordAuthentication yes       
save and exit 

#restart the ssh
sudo systemctl restart sshd.service


#Do the following on the client (worker)

	#login as vilas
	sudo su vilas
	cd 
	mkdir -p ~/.ssh
	touch ~/.ssh/authorized_keys

	chmod -R 700 ~/.ssh
	chmod 600 ~/.ssh/*


#Do the following on source (server)
	sudo su - vilas 
	ssh-keygen -t rsa

ssh-copy-id vilas@<ip>  #slave ip

#cat ~/.ssh/id_rsa.pub - Copy it to the remote ~/.ssh/authorized_keys  

test connection with slave by using ssh ip 

ssh@ip
exit
--

installing ansible on master -

sudo apt update 
sudo apt upgrade
sudo apt install python3 python3-pip
sudo apt-get install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible

#check pip presense if its not there install 
#sudo apt install python3—pip

pip3 install --user ansible

export PATH=$PATH:/home/vilas/.local/bin

+++

██╗███╗░░██╗██╗░░░██╗███████╗███╗░░██╗████████╗░█████╗░██████╗░██╗░░░██╗
██║████╗░██║██║░░░██║██╔════╝████╗░██║╚══██╔══╝██╔══██╗██╔══██╗╚██╗░██╔╝
██║██╔██╗██║╚██╗░██╔╝█████╗░░██╔██╗██║░░░██║░░░██║░░██║██████╔╝░╚████╔╝░
██║██║╚████║░╚████╔╝░██╔══╝░░██║╚████║░░░██║░░░██║░░██║██╔══██╗░░╚██╔╝░░
██║██║░╚███║░░╚██╔╝░░███████╗██║░╚███║░░░██║░░░╚█████╔╝██║░░██║░░░██║░░░
╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░

on master with ssh of salve -

sudo mkdir -p /etc/ansible


cd ..
sudo chown vilas:vilas ansible
cd ansible 
chmod 777 .

vi hosts 

	# we can create groups on this 
#in a group we can have multiple machines and machines can belong to multiple groups

example		[frontend]
		ip 1
		ip 2
		[backend]
		ip 2
		[machines in usa]
		ip3 
		ip1




#file location /etc/ansible/hosts or /etc/ansible/ansible_hosts

[web_servers]
webserver1.example.com
webserver2.example.com

[db_servers]
dbserver1.example.com


ansible all -m setup
		ping
ansible all -m shell -a "mkdir test"


adhoc commands -executing once 


playbook-
https://github.com/pythonkid2/ansible/tree/master/05playbook

when we want to repeat some thing

Run the playbook
	ansible-playbook createfile.yaml -kK

---
- hosts: localhost  # Specify the target hosts or group here
  become: yes      # Use become to execute tasks with elevated privileges (e.g., sudo)

  tasks:
    - name: Create file named Vilas.txt
      file:
        path: /tmp/Vilas.txt  # Specify the correct path and filename
        state: touch          # Use "touch" state to create an empty file



++++++++
🅣🅗🅔 🅔🅝🅓
++++++

	under /etc/ssh/sshd_config
		sudo vi /etc/ssh/sshd_config
		#sudo is mandatory



	PermitRootLogin yes (PermitRootLogin prohibit-password for ubuntu)
	ClientAliveInterval 1200
	ClientAliveCountMax 3

	#add hosts in /etc/hosts

	sudo systemctl restart sshd.service
	
	


#Do the following on source (server)
	sudo su - vilas 
	ssh-keygen -t rsa

	ssh-copy-id vilas@<ip> 


	cat ~/.ssh/id_rsa.pub
		Copy it to the remote ~/.ssh/authorized_keys
	
	
Reference
	https://community.cloudera.com/t5/Support-Questions/how-to-create-password-less-ssh-between-two-AWS-EC2/td-p/109442
	https://www.cyberciti.biz/faq/how-to-disable-ssh-password-login-on-linux/
	https://sectigostore.com/blog/what-is-passwordless-ssh-a-look-at-ssh-passwordless-authentication/
	
To permit root login	
	https://docs.rackspace.com/support/how-to/enable-ssh-remote-root-login-on-centos-and-the-ubuntu-operating-system/
	
	
	
alternatively you can have ssh with pwd (local pwd for key)
	add this pwd to ssd-agent

This can be done executing the below commands.	
	eval $(ssh-agent) 
	ssh-add

