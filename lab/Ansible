

Create 2 ubuntu machines 20.04 
---> SSH

while having same user in both machine we can connect using ssh 
    ssh <ip> 

1, Create a user 
    with same name and password
    enable password based authentication
    establish ssh connectivity 


Do the following on all nodes.
	sudo su
	#create user called "mathew"
	useradd -m -s /bin/bash mathew
	#setup password
	passwd mathew

	#add to sudo groups

+++

centos (on worker/slave nodes)

	Without this user would be prompted for sudo user's access issue.
	Making yourself a super user. Open /etc/sudoers. Make sure following two lines are uncommented:
	## Allows people in group wheel to run all commands
	%wheel ALL=(ALL)       ALL

	## Same thing without a password
	%wheel ALL=(ALL)       NOPASSWD: ALL
	mathew ALL=(ALL)       NOPASSWD: ALL

	Add yourself to wheel group.

	usermod -aG wheel <yourname> 
	usermod -aG wheel mathew


+++

ubuntu top

	usermod -aG sudo <yourname> 
	usermod -aG sudo mathew
	
https://code-maven.com/enable-ansible-passwordless-sudo
	
visudo 

		change 
			%sudo   ALL=(ALL:ALL) ALL    comment it # in front
		to 
add the below 
			%sudo   ALL=(ALL:ALL) NOPASSWD: ALL

#check   sudo cat /etc/sudoers


#under /etc/ssh/sshd_config

		sudo vi /etc/ssh/sshd_config
		#sudo is mandatory

# To disable tunneled clear text passwords, change to no here!
	PasswordAuthentication yes       
save and exit 

#restart the ssh
sudo systemctl restart sshd.service


#Do the following on the client (worker)

	#login as mathew
	sudo su mathew
	cd 
	mkdir -p ~/.ssh
	touch ~/.ssh/authorized_keys

	chmod -R 700 ~/.ssh
	chmod 600 ~/.ssh/*


#Do the following on source (server)
	sudo su - mathew 
	ssh-keygen -t rsa

ssh-copy-id mathew@<ip>  #slave ip

#cat ~/.ssh/id_rsa.pub - Copy it to the remote ~/.ssh/authorized_keys  

test connection with slave by using ssh ip 

ssh@ip
exit
--

installing ansible on master -

sudo apt update 
sudo apt upgrade
sudo apt install python3 python3-pip
sudo apt-get install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible

#check pip presense if its not there install 
#sudo apt install python3—pip

pip3 install --user ansible

export PATH=$PATH:/home/mathew/.local/bin

+++

██╗███╗░░██╗██╗░░░██╗███████╗███╗░░██╗████████╗░█████╗░██████╗░██╗░░░██╗
██║████╗░██║██║░░░██║██╔════╝████╗░██║╚══██╔══╝██╔══██╗██╔══██╗╚██╗░██╔╝
██║██╔██╗██║╚██╗░██╔╝█████╗░░██╔██╗██║░░░██║░░░██║░░██║██████╔╝░╚████╔╝░
██║██║╚████║░╚████╔╝░██╔══╝░░██║╚████║░░░██║░░░██║░░██║██╔══██╗░░╚██╔╝░░
██║██║░╚███║░░╚██╔╝░░███████╗██║░╚███║░░░██║░░░╚█████╔╝██║░░██║░░░██║░░░
╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░

on master 

sudo mkdir -p /etc/ansible

cd ..
sudo chown mathew:mathew ansible
cd ansible 
chmod 777 .

vi hosts 

	# we can create groups on this 
#in a group we can have multiple machines and machines can belong to multiple groups

example		[frontend]
		ip 1
		ip 2
		[backend]
		ip 2
		[machines in usa]
		ip3 
		ip1




#file location /etc/ansible/hosts or /etc/ansible/ansible_hosts

[web_servers]
webserver1.example.com
webserver2.example.com

[db_servers]
dbserver1.example.com


ansible all -m setup
		ping
ansible all -m shell -a "mkdir test"


adhoc commands -executing once 


playbook-

https://github.com/pythonkid2/ansible/tree/master/05playbook

when we want to repeat some thing

Run the playbook
	ansible-playbook createfile.yaml -kK

---
- hosts: localhost  # Specify the target hosts or group here
  become: yes      # Use become to execute tasks with elevated privileges (e.g., sudo)

  tasks:
    - name: Create file named mathew.txt
      file:
        path: /tmp/mathew.txt  # Specify the correct path and filename
        state: touch          # Use "touch" state to create an empty file



++++++++
🅣🅗🅔 🅔🅝🅓
++++++

	

