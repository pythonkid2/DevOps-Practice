
#not working properly


Installing Kubernetes on Ubuntu

Step 1: Prepare the Environment

1.1. Select the Number of Instances: Decide how many instances you want. For this guide, we'll use 3 instances.

1.2. Instance Type: You can choose t2.medium or t3a.medium as the instance type.

Step 2: Set Up Machines

2.1. Create 3 Machines: Set up 3 Ubuntu machines.

2.2. Create Network Connectivity: Ensure network connectivity between these 3 machines.

2.3. Inbound Rules: Allow all traffic with a custom security group name.

Step 3: Hostname Configuration

3.1. Machine 1 (Master): Set the hostname for the master node:

  hostnamectl set-hostname kmaster

3.2. Machines 2 & 3 (Workers): Set the hostname for worker nodes:

  hostnamectl set-hostname worker1   # On worker node 2
  hostnamectl set-hostname worker2   # On worker node 3
  
3.3. Verify Hostname: Check the hostname using hostname command.

3.4. IP Addresses: Use ip a to find the private IP addresses.

3.5. Edit /etc/hosts: Edit the hosts file to map hostnames to IP addresses:

sudo vi /etc/hosts

Add the following lines:

IP1   kmaster
IP2   worker1
IP3   worker2

3.6. Ping Test: Verify that you can ping hostnames from all 3 nodes.

Step 4: Install Kubernetes

4.1. Follow the Kubernetes Installation Guide: Use this link to install Kubernetes: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

Execute the following commands:

  sudo apt-get update
  sudo apt-get install -y apt-transport-https ca-certificates curl
  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  sudo apt-get update
  sudo apt-get install -y kubelet kubeadm kubectl
  sudo apt-mark hold kubelet kubeadm kubectl

4.2. Install Docker: Follow the Docker installation guide for Ubuntu: https://docs.docker.com/engine/install/ubuntu/

Execute these commands:

sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install containerd.io

Step 5: Configure Runtime

5.1. Container Runtimes: For Container Runtimes, refer to: https://kubernetes.io/docs/setup/production-environment/container-runtimes/

Configure runtime modules:

  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
  overlay
  br_netfilter
  EOF
  sudo modprobe overlay
  sudo modprobe br_netfilter

Set sysctl parameters:

  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-iptables  = 1
  net.bridge.bridge-nf-call-ip6tables = 1
  net.ipv4.ip_forward                 = 1
  EOF
  sudo sysctl --system


Verify module and sysctl settings.

5.2. Use systemd Cgroup Driver: Edit the containerd config file:

  vi /etc/containerd/config.toml

Remove everything and add:

  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
      SystemdCgroup = true


Restart containerd:
  sudo systemctl restart containerd


Step 6: Initialize Kubernetes

6.1. On Master Node: Initialize Kubernetes:

  kubeadm init

Copy the join command and token for worker nodes.

6.2. On Worker Nodes: Run the copied join command.

6.3. On Master Node: Copy and execute mkdir and sudo chown commands from the kubeadm init output.

6.4. On Master Node: Verify nodes:

  kubectl get nodes

Step 7: Apply Network Plugins

7.1. Apply Weave Network Plugin:

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

7.2. Alternatively: You can also try installing kubectl with sudo apt-get update and sudo apt-get install -y kubectl.

Step 8: Troubleshoot (if needed)

kubeadm reset

8.2. Reinitialize Kubernetes:

kubeadm init
8.3. Check Pod Status:
kubectl get pod -n kube-system -o wide

8.4. Test Deployment:

kubectl run nginx --image=nginx
